-- 1. List all unique cities where customers are located.
SELECT DISTINCT customer_city
FROM customers;

-- 2. Count the number of orders placed in 2017.
SELECT *
FROM orders;

SELECT Year(order_purchase_timestamp) AS `Year`
	,Count(order_id)
FROM orders
GROUP BY `year`
HAVING `year` = 2017;

-- 3. Find the total sales per category
WITH sales
AS (
	SELECT o.order_id
		,o.product_id
		,p.product_category
		,pay.payment_value
	FROM order_items o
	INNER JOIN products p ON p.product_id = o.product_id
	INNER JOIN payments pay ON pay.order_id = o.order_id
	)
SELECT product_category AS Category
	,round(Sum(payment_value), 2) AS Total_sales
FROM Sales
GROUP BY product_category
ORDER BY total_sales DESC;

-- 4. Calculate the percentage of orders that were paid in installments.
SELECT round((
			SELECT count(order_id)
			FROM payments
			WHERE payment_installments > 1
			) / count(order_id) * 100, 2) AS perct
FROM payments;

WITH installment
AS (
	SELECT count(order_id) AS total_inst
	FROM payments
	WHERE payment_installments > 1
	)
SELECT total_inst / (
		SELECT count(order_id)
		FROM payments
		) * 100
FROM installment;

-- 5. Count the number of customers from each state
SELECT customer_state AS STATE
	,count(customer_id) AS count
FROM customers
GROUP BY customer_state
ORDER BY count DESC;

-- 1. Calculate the number of orders per month in 2018.
SELECT monthname(order_purchase_timestamp) AS `Month`
	,count(order_id) AS Number_of_orders
FROM orders
WHERE year(order_purchase_timestamp) = 2018
GROUP BY monthname(order_purchase_timestamp);

-- 2. Find the average number of products per order, grouped by customer city
WITH xyz
AS (
	SELECT oi.order_id
		,o.customer_id
		,c.customer_city
		,order_item_id
	FROM order_items oi
	INNER JOIN orders o ON oi.order_id = o.order_id
	INNER JOIN customers c ON o.customer_id = c.customer_id
	)
SELECT customer_city AS Customer_City
	,avg(order_item_id) AS Average_per_order
FROM xyz
GROUP BY customer_city;

-- 3. Calculate the percentage of total revenue contributed by each product category.
WITH cat
AS (
	SELECT oi.product_id
		,p.product_category
		,pay.order_id
		,pay.payment_value
	FROM order_items oi
	INNER JOIN products p ON oi.product_id = p.product_id
	INNER JOIN payments pay ON oi.order_id = pay.order_id
	)
	,avge
AS (
	SELECT product_category AS Category
		,SUM(payment_value) AS Total_Payment
		,COUNT(*) AS Total_Orders
		,AVG(payment_value) AS Avg_Payment
	FROM cat
	GROUP BY product_category
	)
SELECT *
	,(Total_Payment) / (
		SELECT sum(payment_value)
		FROM payments
		) * 100 AS Percentage
FROM avge
ORDER BY total_payment DESC;

-- 4. Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT seller_id AS Seller
	,Sum(price) + sum(freight_value) AS Revenue
	,rank() OVER (
		ORDER BY sum(price) + sum(freight_value) DESC
		) AS `Rank`
FROM order_items
GROUP BY seller_id
ORDER BY revenue DESC;

-- Advanced Queries
-- 1. Calculate the moving average of order values for each customer over their order history.
SELECT *
	,avg(payment_value) OVER (
		PARTITION BY customer_id ORDER BY order_purchase_timestamp ASC rows BETWEEN 2 preceding
				AND CURRENT row
		) AS mov_avg
FROM (
	SELECT o.customer_id
		,o.order_purchase_timestamp
		,p.payment_value
	FROM payments p
	INNER JOIN orders o ON p.order_id = o.order_id
	) AS xyz;

-- 2. Calculate the cumulative sales per month for each year.
WITH tab1
AS (
	SELECT month(o.order_purchase_timestamp) AS `Month`
		,year(o.order_purchase_timestamp) AS `Year`
		,p.payment_value
	FROM payments p
	INNER JOIN orders o ON p.order_id = o.order_id
	)
SELECT `Month`
	,`Year`
	,sum(payment_value) AS Tot
FROM tab1
GROUP BY `Month`
	,`Year`
ORDER BY `Month`
	,`Year`;

SELECT month(o.order_purchase_timestamp) AS `X`
	,year(o.order_purchase_timestamp) AS `Y`
	,p.payment_value
FROM payments p
INNER JOIN orders o ON p.order_id = o.order_id;

-- 3. Calculate the year-over-year growth rate of total sales. 
SELECT year(o.order_purchase_timestamp) AS x
	,Sum(payment_value) AS Total_sales
FROM payments p
INNER JOIN orders o ON o.order_id = p.order_id
GROUP BY x;

-- 4. Identify the top 3 customers who spent the most money in each year.
SELECT *
FROM (
	WITH sales AS (
			SELECT p.order_id
				,P.payment_value
				,o.customer_id
				,o.order_purchase_timestamp
				,year(order_purchase_timestamp) AS `year`
			FROM payments p
			LEFT JOIN orders o ON p.order_id = o.order_id
			)
	SELECT `year`
		,customer_id
		,sum(payment_value) AS total_spend
		,rank() OVER (
			PARTITION BY `year` ORDER BY sum(payment_value) DESC
			) AS rn
	FROM sales
	GROUP BY `year`
		,customer_id
	) t
WHERE rn <= 3;
